=begin
#Bleumi Pay API

#A simple and powerful REST API to integrate ERC-20, Ethereum, xDai payments and/or payouts into your business or application

The version of the OpenAPI document: 1.0.0
Contact: info@bleumi.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'spec_helper'
require 'json'

# Unit tests for BleumiPay::PaymentsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PaymentsApi' do
  before do
    # run before each test
    @api_instance = BleumiPay::PaymentsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PaymentsApi' do
    it 'should create an instance of PaymentsApi' do
      expect(@api_instance).to be_instance_of(BleumiPay::PaymentsApi)
    end
  end

  # unit tests for create_payment
  # Generate a unique wallet address in the specified network to accept payment
  # @param create_payment_request 
  # @param [Hash] opts the optional parameters
  # @option opts [Chain] :chain Ethereum network in which payment is to be created. Please refer documentation for Supported Networks
  # @return [CreatePaymentResponse]
  describe 'create_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payment
  # Retrieve the wallet addresses &amp; token balances for a given payment
  # @param id Unique identifier of the payment (specified during [Create a Payment](#createPayment)) to retrieve
  # @param [Hash] opts the optional parameters
  # @return [Payment]
  describe 'get_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payment_operation
  # Retrieve a payment operation for a specific payment.
  # @param id Unique identifier of the payment (specified during [Create a Payment](#createPayment))
  # @param txid ID of a specific operation of the payment
  # @param [Hash] opts the optional parameters
  # @return [PaymentOperation]
  describe 'get_payment_operation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_payment_operations
  # Retrieve all payment operations for a specific payment.
  # @param id Unique identifier of the payment (specified during [Create a Payment](#createPayment))
  # @param [Hash] opts the optional parameters
  # @option opts [String] :next_token Cursor to start results from
  # @return [PaginatedPaymentOperations]
  describe 'list_payment_operations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_payments
  # Retrieve all payments created.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :next_token Cursor to start results from
  # @option opts [String] :sort_by Sort payments by
  # @option opts [String] :start_at Get payments from this timestamp (unix)
  # @option opts [String] :end_at Get payments till this timestamp (unix)
  # @return [PaginatedPayments]
  describe 'list_payments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for refund_payment
  # Refund the balance of a token for a given payment to the buyerAddress
  # @param id Unique identifier of the payment (specified during [Create a Payment](#createPayment))
  # @param payment_refund_request Request body - used to specify the token to refund.
  # @param [Hash] opts the optional parameters
  # @option opts [Chain] :chain network in which payment is to be created.
  # @return [PaymentOperationResponse]
  describe 'refund_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for settle_payment
  # Settle a specific amount of a token for a given payment to the transferAddress and remaining balance (if any) will be refunded to the buyerAddress
  # @param id Unique identifier of the payment (specified during [Create a Payment](#createPayment))
  # @param payment_settle_request Request body - used to specify the amount to settle.
  # @param [Hash] opts the optional parameters
  # @option opts [Chain] :chain network in which payment is to be created.
  # @return [PaymentOperationResponse]
  describe 'settle_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
