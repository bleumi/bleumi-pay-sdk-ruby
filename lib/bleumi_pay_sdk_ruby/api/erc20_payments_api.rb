=begin
#Bleumi Pay API

#A simple and powerful REST API to integrate ERC20 payments into your business or application

The version of the OpenAPI document: 1.0.0
Contact: info@bleumi.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.0

=end

require 'cgi'

module BleumiPay
  class Erc20PaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an unique wallet address to accept payments for an ERC-20 token from a buyer
    # @param wallet_create_input [WalletCreateInput] 
    # @param [Hash] opts the optional parameters
    # @option opts [EthNetwork] :chain Ethereum network in which wallet is to be created.
    # @return [WalletCreateOutput]
    def generate_wallet(wallet_create_input, opts = {})
      data, _status_code, _headers = generate_wallet_with_http_info(wallet_create_input, opts)
      data
    end

    # Create an unique wallet address to accept payments for an ERC-20 token from a buyer
    # @param wallet_create_input [WalletCreateInput] 
    # @param [Hash] opts the optional parameters
    # @option opts [EthNetwork] :chain Ethereum network in which wallet is to be created.
    # @return [Array<(WalletCreateOutput, Integer, Hash)>] WalletCreateOutput data, response status code and response headers
    def generate_wallet_with_http_info(wallet_create_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Erc20PaymentsApi.generate_wallet ...'
      end
      # verify the required parameter 'wallet_create_input' is set
      if @api_client.config.client_side_validation && wallet_create_input.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_create_input' when calling Erc20PaymentsApi.generate_wallet"
      end
      # resource path
      local_var_path = '/v1/payment/erc20/wallet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'chain'] = opts[:'chain'] if !opts[:'chain'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(wallet_create_input) 

      # return_type
      return_type = opts[:return_type] || 'WalletCreateOutput' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Erc20PaymentsApi#generate_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a specific wallet
    # @param id [String] Unique ID identifying the wallet in your system
    # @param [Hash] opts the optional parameters
    # @return [Wallet]
    def get_wallet(id, opts = {})
      data, _status_code, _headers = get_wallet_with_http_info(id, opts)
      data
    end

    # Return a specific wallet
    # @param id [String] Unique ID identifying the wallet in your system
    # @param [Hash] opts the optional parameters
    # @return [Array<(Wallet, Integer, Hash)>] Wallet data, response status code and response headers
    def get_wallet_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Erc20PaymentsApi.get_wallet ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Erc20PaymentsApi.get_wallet"
      end
      # resource path
      local_var_path = '/v1/payment/erc20/wallet/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Wallet' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Erc20PaymentsApi#get_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return a specific operation of the wallet
    # @param id [String] Unique ID identifying the wallet in your system
    # @param txid [String] ID of a specific operation of the wallet
    # @param [Hash] opts the optional parameters
    # @return [WalletOperation]
    def get_wallet_operation(id, txid, opts = {})
      data, _status_code, _headers = get_wallet_operation_with_http_info(id, txid, opts)
      data
    end

    # Return a specific operation of the wallet
    # @param id [String] Unique ID identifying the wallet in your system
    # @param txid [String] ID of a specific operation of the wallet
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletOperation, Integer, Hash)>] WalletOperation data, response status code and response headers
    def get_wallet_operation_with_http_info(id, txid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Erc20PaymentsApi.get_wallet_operation ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Erc20PaymentsApi.get_wallet_operation"
      end
      # verify the required parameter 'txid' is set
      if @api_client.config.client_side_validation && txid.nil?
        fail ArgumentError, "Missing the required parameter 'txid' when calling Erc20PaymentsApi.get_wallet_operation"
      end
      # resource path
      local_var_path = '/v1/payment/erc20/wallet/{id}/operation/{txid}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'txid' + '}', CGI.escape(txid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'WalletOperation' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Erc20PaymentsApi#get_wallet_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the list of operations performed by the mechant on a specific wallet
    # @param id [String] Unique ID identifying the wallet in your system
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Cursor to start results from
    # @return [PaginatedWalletOperations]
    def list_wallet_operations(id, opts = {})
      data, _status_code, _headers = list_wallet_operations_with_http_info(id, opts)
      data
    end

    # Return the list of operations performed by the mechant on a specific wallet
    # @param id [String] Unique ID identifying the wallet in your system
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Cursor to start results from
    # @return [Array<(PaginatedWalletOperations, Integer, Hash)>] PaginatedWalletOperations data, response status code and response headers
    def list_wallet_operations_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Erc20PaymentsApi.list_wallet_operations ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Erc20PaymentsApi.list_wallet_operations"
      end
      # resource path
      local_var_path = '/v1/payment/erc20/wallet/{id}/operation'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PaginatedWalletOperations' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Erc20PaymentsApi#list_wallet_operations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of wallets
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Cursor to start results from
    # @option opts [String] :sort_by Sort wallets by
    # @option opts [String] :start_at Get wallets from this timestamp
    # @option opts [String] :end_at Get wallets till this timestamp
    # @return [PaginatedWallets]
    def list_wallets(opts = {})
      data, _status_code, _headers = list_wallets_with_http_info(opts)
      data
    end

    # Returns a list of wallets
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_token Cursor to start results from
    # @option opts [String] :sort_by Sort wallets by
    # @option opts [String] :start_at Get wallets from this timestamp
    # @option opts [String] :end_at Get wallets till this timestamp
    # @return [Array<(PaginatedWallets, Integer, Hash)>] PaginatedWallets data, response status code and response headers
    def list_wallets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Erc20PaymentsApi.list_wallets ...'
      end
      allowable_values = ["createdAt", "updatedAt"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !allowable_values.include?(opts[:'sort_by'])
        fail ArgumentError, "invalid value for \"sort_by\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/v1/payment/erc20/wallet'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nextToken'] = opts[:'next_token'] if !opts[:'next_token'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'startAt'] = opts[:'start_at'] if !opts[:'start_at'].nil?
      query_params[:'endAt'] = opts[:'end_at'] if !opts[:'end_at'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PaginatedWallets' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Erc20PaymentsApi#list_wallets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refund wallet
    # @param id [String] Unique ID identifying this record in your system
    # @param wallet_refund_operation_input [WalletRefundOperationInput] Request body - used to specify the token to refund.
    # @param [Hash] opts the optional parameters
    # @return [WalletOperationOutput]
    def refund_wallet(id, wallet_refund_operation_input, opts = {})
      data, _status_code, _headers = refund_wallet_with_http_info(id, wallet_refund_operation_input, opts)
      data
    end

    # Refund wallet
    # @param id [String] Unique ID identifying this record in your system
    # @param wallet_refund_operation_input [WalletRefundOperationInput] Request body - used to specify the token to refund.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletOperationOutput, Integer, Hash)>] WalletOperationOutput data, response status code and response headers
    def refund_wallet_with_http_info(id, wallet_refund_operation_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Erc20PaymentsApi.refund_wallet ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Erc20PaymentsApi.refund_wallet"
      end
      # verify the required parameter 'wallet_refund_operation_input' is set
      if @api_client.config.client_side_validation && wallet_refund_operation_input.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_refund_operation_input' when calling Erc20PaymentsApi.refund_wallet"
      end
      # resource path
      local_var_path = '/v1/payment/erc20/wallet/{id}/refund'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(wallet_refund_operation_input) 

      # return_type
      return_type = opts[:return_type] || 'WalletOperationOutput' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Erc20PaymentsApi#refund_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Settle a wallet, amount received will be transferred even if less than payment amount
    # @param id [String] Unique ID identifying this record in your system
    # @param wallet_settle_operation_input [WalletSettleOperationInput] Request body - used to specify the amount to settle.
    # @param [Hash] opts the optional parameters
    # @return [WalletOperationOutput]
    def settle_wallet(id, wallet_settle_operation_input, opts = {})
      data, _status_code, _headers = settle_wallet_with_http_info(id, wallet_settle_operation_input, opts)
      data
    end

    # Settle a wallet, amount received will be transferred even if less than payment amount
    # @param id [String] Unique ID identifying this record in your system
    # @param wallet_settle_operation_input [WalletSettleOperationInput] Request body - used to specify the amount to settle.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WalletOperationOutput, Integer, Hash)>] WalletOperationOutput data, response status code and response headers
    def settle_wallet_with_http_info(id, wallet_settle_operation_input, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Erc20PaymentsApi.settle_wallet ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling Erc20PaymentsApi.settle_wallet"
      end
      # verify the required parameter 'wallet_settle_operation_input' is set
      if @api_client.config.client_side_validation && wallet_settle_operation_input.nil?
        fail ArgumentError, "Missing the required parameter 'wallet_settle_operation_input' when calling Erc20PaymentsApi.settle_wallet"
      end
      # resource path
      local_var_path = '/v1/payment/erc20/wallet/{id}/settle'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(wallet_settle_operation_input) 

      # return_type
      return_type = opts[:return_type] || 'WalletOperationOutput' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Erc20PaymentsApi#settle_wallet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
